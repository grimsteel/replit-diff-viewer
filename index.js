const els = {
  viewer: document.getElementById("viewer"),
  teaser: document.getElementById("teaser-diff"),
  fileListCont: document.getElementById("file-list"),
  fileList: document.querySelector("#file-list > div"),
  main: document.getElementById("main-diff"),
  loadingMsg: document.getElementById("loading-msg"),
  welcome: document.getElementById("welcome"),
  currentFolder: document.getElementById("current-folder"),
  diffFilename: document.getElementById("diff-filename")
};

let currentDir = ".";
let stopWatching = () => {};

/**
* Properly set a timeout for the init() function
* Rejects if it was unable to
* @param {number} timeoutMs
* @param {boolean} debug
*/
async function handshake(timeoutMs=1000, debug=false) {
  return await Promise.race([
    replit.init({
      permissions: [
        "writeFile",
        "readFile"
      ],
      timeout: timeoutMs,
      debug
    }),
    new Promise((_, reject) => setTimeout(() => reject(), timeoutMs))
  ])
}

function createFolderIcon() {
  let svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  svg.setAttribute("viewBox", "0 0 24 24");
  svg.classList.add("folder-icon");
  let useEl = svg.appendChild(document.createElementNS("http://www.w3.org/2000/svg", "use"));
  useEl.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#folder");
  return svg;
}

function createFileIcon() {
  let img = new Image(16, 16);
  img.src = "icon.svg";
  return img;
}

function debounce(func){
  let timer;
  return () => {
    clearTimeout(timer);
    timer = setTimeout(() => func(), 300);
  };
}

async function showFile(filePath) {
  let { content, error } = await replit.fs.readFile(filePath);
  if (!error) {
    els.diffFilename.innerText = filePath;
    els.main.loadDiff(content);
  }
}

async function refreshFileList() {
  let { error, children } = await replit.fs.readDir(currentDir);;
  els.fileList.textContent = "";
  if (!error) {
    if (currentDir !== ".") children.unshift({ type: "DIRECTORY", filename: ".." });
    for (let child of children) {
      let childEl = els.fileList.appendChild(document.createElement("div"));
      if (child.type === "DIRECTORY") {
        childEl.append(createFolderIcon(), child.filename);
        childEl.addEventListener("click", () => {
          currentDir = posix.join(currentDir, child.filename);
          els.currentFolder.value = currentDir;
          refreshFileList();
        });
      } else {
        let iconEl = document.createElement("span");
        if (child.filename.split(".").pop().toLowerCase() !== "diff")
          childEl.classList.add("unselectable");
        else {
          iconEl = createFileIcon();
          childEl.addEventListener("click", () => {
            els.fileListCont.hidden = true;
            els.viewer.hidden = false;
            showFile(posix.join(currentDir, child.filename));
          });
        }
        childEl.append(iconEl, child.filename);
      }
    }
  }
}

async function loadExtension() {
  try {
    await handshake(1000, true);
  } catch {
    els.welcome.hidden = false;
    return;
  } finally {
    els.loadingMsg.hidden = true;
  }
  let selectedFile = await replit.extensionPort.filePath;
  if (selectedFile) {
    els.viewer.hidden = false;
    await showFile(selectedFile);
  } else {
    els.fileListCont.hidden = false;
    await refreshFileList();
  }
}

els.teaser.loadDiff(`diff --git a/README.md b/README.md
index e69de29..8b8bcbf 100644
--- a/README.md
+++ b/README.md
@@ -0,0 +1,10 @@
+<div align="center">
+  
+![icon](icon.svg)
+# Replit Git Diff Viewer Extension </div>
+
+This is a very simple tool to view graphical diffs generated by Git in Repls
+
+It was created by [@grimsteel](https://replit.com/@GrimSteel)
+
+It is powered up [diff2html](https://github.com/rtfpessoa/diff2html)
\\ No newline at end of file`);

loadExtension();
document.querySelector("nav > button").addEventListener("click", () => open('https://replit.com/@GrimSteel', '_blank'));